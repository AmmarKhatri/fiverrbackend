// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: catalog/catalog.proto

package catalog

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Catalog_GetCatalog_FullMethodName           = "/catalog.Catalog/GetCatalog"
	Catalog_AddService_FullMethodName           = "/catalog.Catalog/AddService"
	Catalog_EditService_FullMethodName          = "/catalog.Catalog/EditService"
	Catalog_DeleteService_FullMethodName        = "/catalog.Catalog/DeleteService"
	Catalog_SetClientPrice_FullMethodName       = "/catalog.Catalog/SetClientPrice"
	Catalog_GetClientPrice_FullMethodName       = "/catalog.Catalog/GetClientPrice"
	Catalog_GetAppointmentCharge_FullMethodName = "/catalog.Catalog/GetAppointmentCharge"
)

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	GetCatalog(ctx context.Context, in *GetCatalogRequest, opts ...grpc.CallOption) (*GetCatalogResponse, error)
	AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*Service, error)
	EditService(ctx context.Context, in *EditServiceRequest, opts ...grpc.CallOption) (*Service, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetClientPrice(ctx context.Context, in *SetClientPriceRequest, opts ...grpc.CallOption) (*ClientPrice, error)
	GetClientPrice(ctx context.Context, in *GetClientPriceRequest, opts ...grpc.CallOption) (*ClientPrice, error)
	GetAppointmentCharge(ctx context.Context, in *GetAppointmentChargeRequest, opts ...grpc.CallOption) (*AppointmentCharge, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GetCatalog(ctx context.Context, in *GetCatalogRequest, opts ...grpc.CallOption) (*GetCatalogResponse, error) {
	out := new(GetCatalogResponse)
	err := c.cc.Invoke(ctx, Catalog_GetCatalog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, Catalog_AddService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) EditService(ctx context.Context, in *EditServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, Catalog_EditService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Catalog_DeleteService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) SetClientPrice(ctx context.Context, in *SetClientPriceRequest, opts ...grpc.CallOption) (*ClientPrice, error) {
	out := new(ClientPrice)
	err := c.cc.Invoke(ctx, Catalog_SetClientPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetClientPrice(ctx context.Context, in *GetClientPriceRequest, opts ...grpc.CallOption) (*ClientPrice, error) {
	out := new(ClientPrice)
	err := c.cc.Invoke(ctx, Catalog_GetClientPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetAppointmentCharge(ctx context.Context, in *GetAppointmentChargeRequest, opts ...grpc.CallOption) (*AppointmentCharge, error) {
	out := new(AppointmentCharge)
	err := c.cc.Invoke(ctx, Catalog_GetAppointmentCharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	GetCatalog(context.Context, *GetCatalogRequest) (*GetCatalogResponse, error)
	AddService(context.Context, *AddServiceRequest) (*Service, error)
	EditService(context.Context, *EditServiceRequest) (*Service, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*empty.Empty, error)
	SetClientPrice(context.Context, *SetClientPriceRequest) (*ClientPrice, error)
	GetClientPrice(context.Context, *GetClientPriceRequest) (*ClientPrice, error)
	GetAppointmentCharge(context.Context, *GetAppointmentChargeRequest) (*AppointmentCharge, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) GetCatalog(context.Context, *GetCatalogRequest) (*GetCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalog not implemented")
}
func (UnimplementedCatalogServer) AddService(context.Context, *AddServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (UnimplementedCatalogServer) EditService(context.Context, *EditServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditService not implemented")
}
func (UnimplementedCatalogServer) DeleteService(context.Context, *DeleteServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedCatalogServer) SetClientPrice(context.Context, *SetClientPriceRequest) (*ClientPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientPrice not implemented")
}
func (UnimplementedCatalogServer) GetClientPrice(context.Context, *GetClientPriceRequest) (*ClientPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientPrice not implemented")
}
func (UnimplementedCatalogServer) GetAppointmentCharge(context.Context, *GetAppointmentChargeRequest) (*AppointmentCharge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentCharge not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GetCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetCatalog(ctx, req.(*GetCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_AddService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).AddService(ctx, req.(*AddServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_EditService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).EditService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_EditService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).EditService(ctx, req.(*EditServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_SetClientPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).SetClientPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_SetClientPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).SetClientPrice(ctx, req.(*SetClientPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetClientPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetClientPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetClientPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetClientPrice(ctx, req.(*GetClientPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetAppointmentCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetAppointmentCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetAppointmentCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetAppointmentCharge(ctx, req.(*GetAppointmentChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCatalog",
			Handler:    _Catalog_GetCatalog_Handler,
		},
		{
			MethodName: "AddService",
			Handler:    _Catalog_AddService_Handler,
		},
		{
			MethodName: "EditService",
			Handler:    _Catalog_EditService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Catalog_DeleteService_Handler,
		},
		{
			MethodName: "SetClientPrice",
			Handler:    _Catalog_SetClientPrice_Handler,
		},
		{
			MethodName: "GetClientPrice",
			Handler:    _Catalog_GetClientPrice_Handler,
		},
		{
			MethodName: "GetAppointmentCharge",
			Handler:    _Catalog_GetAppointmentCharge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog/catalog.proto",
}
