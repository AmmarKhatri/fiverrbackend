package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"graph-gateway/graph/helpers"
	"graph-gateway/protos/account"
	"graph-gateway/protos/auth"
	"graph-gateway/protos/catalog"
	"graph-gateway/protos/comms"
	"graph-gateway/protos/schedule"

	"google.golang.org/protobuf/types/known/emptypb"
)

// UpdateCalendar is the resolver for the UpdateCalendar field.
func (r *mutationResolver) UpdateCalendar(ctx context.Context, input *schedule.UpdateCalendarRequest) (*schedule.UpdateCalendarResponse, error) {
	conn, err := helpers.ScheduleConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := schedule.NewSchedulerClient(conn)
	res, err := c.UpdateCalendar(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// AddAppointment is the resolver for the AddAppointment field.
func (r *mutationResolver) AddAppointment(ctx context.Context, input *schedule.AddAppointmentRequest) (*schedule.Appointment, error) {
	conn, err := helpers.ScheduleConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := schedule.NewSchedulerClient(conn)
	res, err := c.AddAppointment(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// CancelAppointment is the resolver for the CancelAppointment field.
func (r *mutationResolver) CancelAppointment(ctx context.Context, input *schedule.CancelAppointmentRequest) (*string, error) {
	conn, err := helpers.ScheduleConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := schedule.NewSchedulerClient(conn)
	_, err = c.CancelAppointment(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// AcceptedAppointment is the resolver for the AcceptedAppointment field.
func (r *mutationResolver) AcceptedAppointment(ctx context.Context, input *comms.AcceptedAppointmentInput) (*comms.CommsAppointment, error) {
	conn, err := helpers.CommsConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := comms.NewCommunicatorClient(conn)
	res, err := c.AcceptAppointment(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// RejectedAppointment is the resolver for the RejectedAppointment field.
func (r *mutationResolver) RejectedAppointment(ctx context.Context, input *comms.RejectedAppointmentInput) (*string, error) {
	conn, err := helpers.CommsConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := comms.NewCommunicatorClient(conn)
	_, err = c.RejectAppointment(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// SendMessageFromConsole is the resolver for the SendMessageFromConsole field.
func (r *mutationResolver) SendMessageFromConsole(ctx context.Context, input *comms.ConsoleMessageInput) (*comms.ConsoleMessage, error) {
	conn, err := helpers.CommsConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := comms.NewCommunicatorClient(conn)
	res, err := c.SendMessageFromConsole(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// AddService is the resolver for the AddService field.
func (r *mutationResolver) AddService(ctx context.Context, input *catalog.AddServiceRequest) (*catalog.Service, error) {
	conn, err := helpers.CatalogConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := catalog.NewCatalogClient(conn)
	res, err := c.AddService(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// EditService is the resolver for the EditService field.
func (r *mutationResolver) EditService(ctx context.Context, input *catalog.EditServiceRequest) (*catalog.Service, error) {
	conn, err := helpers.CatalogConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := catalog.NewCatalogClient(conn)
	res, err := c.EditService(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// DeleteService is the resolver for the DeleteService field.
func (r *mutationResolver) DeleteService(ctx context.Context, input *catalog.DeleteServiceRequest) (*string, error) {
	conn, err := helpers.CatalogConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := catalog.NewCatalogClient(conn)
	_, err = c.DeleteService(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// SetClientPrice is the resolver for the SetClientPrice field.
func (r *mutationResolver) SetClientPrice(ctx context.Context, input *catalog.SetClientPriceRequest) (*catalog.ClientPrice, error) {
	conn, err := helpers.CatalogConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := catalog.NewCatalogClient(conn)
	res, err := c.SetClientPrice(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// UpdateProfileSection is the resolver for the UpdateProfileSection field.
func (r *mutationResolver) UpdateProfileSection(ctx context.Context, input *account.UpdateProfileSectionRequest) (*account.ProfileSectionResponse, error) {
	conn, err := helpers.AccountConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := account.NewAccountClient(conn)
	res, err := c.UpdateProfileSection(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// UpdateBasicUserInfo is the resolver for the UpdateBasicUserInfo field.
func (r *mutationResolver) UpdateBasicUserInfo(ctx context.Context, input *account.UpdatePrivateBasicUserInfoRequest) (*account.PrivateBasicUserInfo, error) {
	conn, err := helpers.AccountConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := account.NewAccountClient(conn)
	res, err := c.UpdateBasicUserInfo(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// AddCustomerReview is the resolver for the AddCustomerReview field.
func (r *mutationResolver) AddCustomerReview(ctx context.Context, input *account.AddCustomerReviewRequest) (*account.CustomerReview, error) {
	conn, err := helpers.AccountConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := account.NewAccountClient(conn)
	res, err := c.AddCustomerReview(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, input *auth.LoginRequest) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.Login(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// Validate2fa is the resolver for the Validate2FA field.
func (r *mutationResolver) Validate2fa(ctx context.Context, input *auth.Validate2FARequest) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.Validate2FA(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// RegisterAccount is the resolver for the RegisterAccount field.
func (r *mutationResolver) RegisterAccount(ctx context.Context, input *auth.RegisterAccountRequest) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.RegisterAccount(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// ValidateEmail is the resolver for the ValidateEmail field.
func (r *mutationResolver) ValidateEmail(ctx context.Context, input *auth.ValidateEmailRequest) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.ValidateEmail(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// SetPassword is the resolver for the SetPassword field.
func (r *mutationResolver) SetPassword(ctx context.Context, input *auth.SetPasswordRequest) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.SetPassword(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// Set2fa is the resolver for the Set2FA field.
func (r *mutationResolver) Set2fa(ctx context.Context, input *auth.Set2FARequest) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.Set2FA(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// Logout is the resolver for the Logout field.
func (r *mutationResolver) Logout(ctx context.Context, input *string) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.Logout(ctx, &emptypb.Empty{})
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// ForgotPassword is the resolver for the ForgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, input *auth.ForgotPasswordRequest) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.ForgotPassword(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// ResetPassword is the resolver for the ResetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input *auth.ResetPasswordRequest) (*string, error) {
	conn, err := helpers.AuthConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := auth.NewAuthClient(conn)
	_, err = c.ResetPassword(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// ListProviderDays is the resolver for the ListProviderDays field.
func (r *queryResolver) ListProviderDays(ctx context.Context, input *schedule.ListDaysRequest) (*schedule.ListProviderDaysResponse, error) {
	conn, err := helpers.ScheduleConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := schedule.NewSchedulerClient(conn)
	res, err := c.ListProviderDays(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// ListCustomerDays is the resolver for the ListCustomerDays field.
func (r *queryResolver) ListCustomerDays(ctx context.Context, input *schedule.ListDaysRequest) (*schedule.ListCustomerDaysResponse, error) {
	conn, err := helpers.ScheduleConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := schedule.NewSchedulerClient(conn)
	res, err := c.ListCustomerDays(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetDayDetails is the resolver for the GetDayDetails field.
func (r *queryResolver) GetDayDetails(ctx context.Context, input *schedule.GetDayDetailsRequest) (*schedule.DayDetails, error) {
	conn, err := helpers.ScheduleConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := schedule.NewSchedulerClient(conn)
	res, err := c.GetDayDetails(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// ProcessOutgoingCallback is the resolver for the ProcessOutgoingCallback field.
func (r *queryResolver) ProcessOutgoingCallback(ctx context.Context, input *comms.OutgoingCallbackRequest) (*string, error) {
	conn, err := helpers.CommsConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := comms.NewCommunicatorClient(conn)
	_, err = c.ProcessOutgoingCallback(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// ProcessIncomingSMSCallback is the resolver for the ProcessIncomingSMSCallback field.
func (r *queryResolver) ProcessIncomingSMSCallback(ctx context.Context, input *comms.IncomingSMSCallbackRequest) (*string, error) {
	conn, err := helpers.CommsConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := comms.NewCommunicatorClient(conn)
	_, err = c.ProcessIncomingSMSCallback(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// ProcessMultiChannelCallback is the resolver for the ProcessMultiChannelCallback field.
func (r *queryResolver) ProcessMultiChannelCallback(ctx context.Context, input *comms.MultiChannelCallbackRequest) (*string, error) {
	conn, err := helpers.CommsConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := comms.NewCommunicatorClient(conn)
	_, err = c.ProcessMultiChannelCallback(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return nil, nil
}

// RequestAppointment is the resolver for the RequestAppointment field.
func (r *queryResolver) RequestAppointment(ctx context.Context, input *comms.CommsAppointmentInput) (*comms.CommsPendingAppointment, error) {
	conn, err := helpers.CommsConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := comms.NewCommunicatorClient(conn)
	res, err := c.RequestAppointment(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetCatalog is the resolver for the GetCatalog field.
func (r *queryResolver) GetCatalog(ctx context.Context, input *catalog.GetCatalogRequest) (*catalog.GetCatalogResponse, error) {
	conn, err := helpers.CatalogConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := catalog.NewCatalogClient(conn)
	res, err := c.GetCatalog(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetClientPrice is the resolver for the GetClientPrice field.
func (r *queryResolver) GetClientPrice(ctx context.Context, input *catalog.GetClientPriceRequest) (*catalog.ClientPrice, error) {
	conn, err := helpers.CatalogConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := catalog.NewCatalogClient(conn)
	res, err := c.GetClientPrice(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetAppointmentCharge is the resolver for the GetAppointmentCharge field.
func (r *queryResolver) GetAppointmentCharge(ctx context.Context, input *catalog.GetAppointmentChargeRequest) (*catalog.AppointmentCharge, error) {
	conn, err := helpers.CatalogConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := catalog.NewCatalogClient(conn)
	res, err := c.GetAppointmentCharge(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetPublicProfileSection is the resolver for the GetPublicProfileSection field.
func (r *queryResolver) GetPublicProfileSection(ctx context.Context, input *account.GetPublicProfileSectionRequest) (*account.ProfileSectionResponse, error) {
	conn, err := helpers.AccountConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := account.NewAccountClient(conn)
	res, err := c.GetPublicProfileSection(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetPrivateProfileSection is the resolver for the GetPrivateProfileSection field.
func (r *queryResolver) GetPrivateProfileSection(ctx context.Context, input *account.GetPrivateProfileSectionRequest) (*account.ProfileSectionResponse, error) {
	conn, err := helpers.AccountConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := account.NewAccountClient(conn)
	res, err := c.GetPrivateProfileSection(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetPrivateBasicUserInfo is the resolver for the GetPrivateBasicUserInfo field.
func (r *queryResolver) GetPrivateBasicUserInfo(ctx context.Context, input *string) (*account.PrivateBasicUserInfo, error) {
	conn, err := helpers.AccountConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := account.NewAccountClient(conn)
	res, err := c.GetPrivateBasicUserInfo(ctx, &emptypb.Empty{})
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetPublicBasicUserInfo is the resolver for the GetPublicBasicUserInfo field.
func (r *queryResolver) GetPublicBasicUserInfo(ctx context.Context, input *account.GetPublicBasicUserInfoRequest) (*account.PublicBasicUserInfo, error) {
	conn, err := helpers.AccountConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := account.NewAccountClient(conn)
	res, err := c.GetPublicBasicUserInfo(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// GetCustomerReviews is the resolver for the GetCustomerReviews field.
func (r *queryResolver) GetCustomerReviews(ctx context.Context, input *account.GetCustomerReviewsRequest) (*account.GetCustomerReviewsResponse, error) {
	conn, err := helpers.AccountConnection()
	if err != nil {
		fmt.Println("Error connecting to the client")
		return nil, err
	}
	defer conn.Close()
	c := account.NewAccountClient(conn)
	res, err := c.GetCustomerReviews(ctx, input)
	if err != nil {
		fmt.Println("Error getting response and calling function")
		return nil, err
	}
	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
