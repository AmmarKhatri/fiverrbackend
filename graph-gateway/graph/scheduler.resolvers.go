package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"graph-gateway/graph/model"
	"graph-gateway/protos/schedule"

	"google.golang.org/genproto/googleapis/type/color"
	"google.golang.org/genproto/googleapis/type/date"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

// Red is the resolver for the red field.
func (r *colorResolver) Red(ctx context.Context, obj *color.Color) (float64, error) {
	return float64(obj.Red), nil
}

// Green is the resolver for the green field.
func (r *colorResolver) Green(ctx context.Context, obj *color.Color) (float64, error) {
	return float64(obj.Green), nil
}

// Blue is the resolver for the blue field.
func (r *colorResolver) Blue(ctx context.Context, obj *color.Color) (float64, error) {
	return float64(obj.Blue), nil
}

// Alpha is the resolver for the alpha field.
func (r *colorResolver) Alpha(ctx context.Context, obj *color.Color) (*model.FloatValue, error) {
	return &model.FloatValue{
		Value: float64(obj.Alpha.Value),
	}, nil
}

// CalendarDate is the resolver for the calendar_date field.
func (r *getDayDetailsRequestResolver) CalendarDate(ctx context.Context, obj *schedule.GetDayDetailsRequest, data *model.DateInput) error {
	obj.CalendarDate = &date.Date{
		Year:  int32(data.Year),
		Month: int32(data.Month),
		Day:   int32(data.Day),
	}
	return nil
}

// LabelColor is the resolver for the label_color field.
func (r *labelInputResolver) LabelColor(ctx context.Context, obj *schedule.LabelInput, data *model.ColorInput) error {
	obj.LabelColor = &color.Color{
		Blue:  float32(data.Blue),
		Green: float32(data.Green),
		Red:   float32(data.Red),
		Alpha: &wrapperspb.FloatValue{
			Value: float32(data.Alpha.Value),
		},
	}
	return nil
}

// StartDate is the resolver for the startDate field.
func (r *listDaysRequestResolver) StartDate(ctx context.Context, obj *schedule.ListDaysRequest, data *model.DateInput) error {
	obj.StartDate = &date.Date{
		Year:  int32(data.Year),
		Month: int32(data.Month),
		Day:   int32(data.Day),
	}
	return nil
}

// CalendarDate is the resolver for the calendar_date field.
func (r *providerDayInputResolver) CalendarDate(ctx context.Context, obj *schedule.ProviderDayInput, data *model.DateInput) error {
	obj.CalendarDate = &date.Date{
		Year:  int32(data.Year),
		Month: int32(data.Month),
		Day:   int32(data.Day),
	}
	return nil
}

// Color returns ColorResolver implementation.
func (r *Resolver) Color() ColorResolver { return &colorResolver{r} }

// GetDayDetailsRequest returns GetDayDetailsRequestResolver implementation.
func (r *Resolver) GetDayDetailsRequest() GetDayDetailsRequestResolver {
	return &getDayDetailsRequestResolver{r}
}

// LabelInput returns LabelInputResolver implementation.
func (r *Resolver) LabelInput() LabelInputResolver { return &labelInputResolver{r} }

// ListDaysRequest returns ListDaysRequestResolver implementation.
func (r *Resolver) ListDaysRequest() ListDaysRequestResolver { return &listDaysRequestResolver{r} }

// ProviderDayInput returns ProviderDayInputResolver implementation.
func (r *Resolver) ProviderDayInput() ProviderDayInputResolver { return &providerDayInputResolver{r} }

type colorResolver struct{ *Resolver }
type getDayDetailsRequestResolver struct{ *Resolver }
type labelInputResolver struct{ *Resolver }
type listDaysRequestResolver struct{ *Resolver }
type providerDayInputResolver struct{ *Resolver }
