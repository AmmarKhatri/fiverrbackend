// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: comms/comms.proto

package comms

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Communicator_ProcessOutgoingCallback_FullMethodName     = "/comms.Communicator/ProcessOutgoingCallback"
	Communicator_ProcessIncomingSMSCallback_FullMethodName  = "/comms.Communicator/ProcessIncomingSMSCallback"
	Communicator_ProcessMultiChannelCallback_FullMethodName = "/comms.Communicator/ProcessMultiChannelCallback"
	Communicator_RequestAppointment_FullMethodName          = "/comms.Communicator/RequestAppointment"
	Communicator_AcceptAppointment_FullMethodName           = "/comms.Communicator/AcceptAppointment"
	Communicator_RejectAppointment_FullMethodName           = "/comms.Communicator/RejectAppointment"
	Communicator_SendMessageFromConsole_FullMethodName      = "/comms.Communicator/SendMessageFromConsole"
)

// CommunicatorClient is the client API for Communicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicatorClient interface {
	ProcessOutgoingCallback(ctx context.Context, in *OutgoingCallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ProcessIncomingSMSCallback(ctx context.Context, in *IncomingSMSCallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ProcessMultiChannelCallback(ctx context.Context, in *MultiChannelCallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RequestAppointment(ctx context.Context, in *CommsAppointmentInput, opts ...grpc.CallOption) (*CommsPendingAppointment, error)
	AcceptAppointment(ctx context.Context, in *AcceptedAppointmentInput, opts ...grpc.CallOption) (*CommsAppointment, error)
	RejectAppointment(ctx context.Context, in *RejectedAppointmentInput, opts ...grpc.CallOption) (*empty.Empty, error)
	SendMessageFromConsole(ctx context.Context, in *ConsoleMessageInput, opts ...grpc.CallOption) (*ConsoleMessage, error)
}

type communicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicatorClient(cc grpc.ClientConnInterface) CommunicatorClient {
	return &communicatorClient{cc}
}

func (c *communicatorClient) ProcessOutgoingCallback(ctx context.Context, in *OutgoingCallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Communicator_ProcessOutgoingCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicatorClient) ProcessIncomingSMSCallback(ctx context.Context, in *IncomingSMSCallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Communicator_ProcessIncomingSMSCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicatorClient) ProcessMultiChannelCallback(ctx context.Context, in *MultiChannelCallbackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Communicator_ProcessMultiChannelCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicatorClient) RequestAppointment(ctx context.Context, in *CommsAppointmentInput, opts ...grpc.CallOption) (*CommsPendingAppointment, error) {
	out := new(CommsPendingAppointment)
	err := c.cc.Invoke(ctx, Communicator_RequestAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicatorClient) AcceptAppointment(ctx context.Context, in *AcceptedAppointmentInput, opts ...grpc.CallOption) (*CommsAppointment, error) {
	out := new(CommsAppointment)
	err := c.cc.Invoke(ctx, Communicator_AcceptAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicatorClient) RejectAppointment(ctx context.Context, in *RejectedAppointmentInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Communicator_RejectAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicatorClient) SendMessageFromConsole(ctx context.Context, in *ConsoleMessageInput, opts ...grpc.CallOption) (*ConsoleMessage, error) {
	out := new(ConsoleMessage)
	err := c.cc.Invoke(ctx, Communicator_SendMessageFromConsole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicatorServer is the server API for Communicator service.
// All implementations must embed UnimplementedCommunicatorServer
// for forward compatibility
type CommunicatorServer interface {
	ProcessOutgoingCallback(context.Context, *OutgoingCallbackRequest) (*empty.Empty, error)
	ProcessIncomingSMSCallback(context.Context, *IncomingSMSCallbackRequest) (*empty.Empty, error)
	ProcessMultiChannelCallback(context.Context, *MultiChannelCallbackRequest) (*empty.Empty, error)
	RequestAppointment(context.Context, *CommsAppointmentInput) (*CommsPendingAppointment, error)
	AcceptAppointment(context.Context, *AcceptedAppointmentInput) (*CommsAppointment, error)
	RejectAppointment(context.Context, *RejectedAppointmentInput) (*empty.Empty, error)
	SendMessageFromConsole(context.Context, *ConsoleMessageInput) (*ConsoleMessage, error)
	mustEmbedUnimplementedCommunicatorServer()
}

// UnimplementedCommunicatorServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicatorServer struct {
}

func (UnimplementedCommunicatorServer) ProcessOutgoingCallback(context.Context, *OutgoingCallbackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOutgoingCallback not implemented")
}
func (UnimplementedCommunicatorServer) ProcessIncomingSMSCallback(context.Context, *IncomingSMSCallbackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessIncomingSMSCallback not implemented")
}
func (UnimplementedCommunicatorServer) ProcessMultiChannelCallback(context.Context, *MultiChannelCallbackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMultiChannelCallback not implemented")
}
func (UnimplementedCommunicatorServer) RequestAppointment(context.Context, *CommsAppointmentInput) (*CommsPendingAppointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAppointment not implemented")
}
func (UnimplementedCommunicatorServer) AcceptAppointment(context.Context, *AcceptedAppointmentInput) (*CommsAppointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAppointment not implemented")
}
func (UnimplementedCommunicatorServer) RejectAppointment(context.Context, *RejectedAppointmentInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectAppointment not implemented")
}
func (UnimplementedCommunicatorServer) SendMessageFromConsole(context.Context, *ConsoleMessageInput) (*ConsoleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageFromConsole not implemented")
}
func (UnimplementedCommunicatorServer) mustEmbedUnimplementedCommunicatorServer() {}

// UnsafeCommunicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicatorServer will
// result in compilation errors.
type UnsafeCommunicatorServer interface {
	mustEmbedUnimplementedCommunicatorServer()
}

func RegisterCommunicatorServer(s grpc.ServiceRegistrar, srv CommunicatorServer) {
	s.RegisterService(&Communicator_ServiceDesc, srv)
}

func _Communicator_ProcessOutgoingCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutgoingCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicatorServer).ProcessOutgoingCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communicator_ProcessOutgoingCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicatorServer).ProcessOutgoingCallback(ctx, req.(*OutgoingCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communicator_ProcessIncomingSMSCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingSMSCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicatorServer).ProcessIncomingSMSCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communicator_ProcessIncomingSMSCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicatorServer).ProcessIncomingSMSCallback(ctx, req.(*IncomingSMSCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communicator_ProcessMultiChannelCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiChannelCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicatorServer).ProcessMultiChannelCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communicator_ProcessMultiChannelCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicatorServer).ProcessMultiChannelCallback(ctx, req.(*MultiChannelCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communicator_RequestAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommsAppointmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicatorServer).RequestAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communicator_RequestAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicatorServer).RequestAppointment(ctx, req.(*CommsAppointmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communicator_AcceptAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedAppointmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicatorServer).AcceptAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communicator_AcceptAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicatorServer).AcceptAppointment(ctx, req.(*AcceptedAppointmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communicator_RejectAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectedAppointmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicatorServer).RejectAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communicator_RejectAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicatorServer).RejectAppointment(ctx, req.(*RejectedAppointmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communicator_SendMessageFromConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicatorServer).SendMessageFromConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Communicator_SendMessageFromConsole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicatorServer).SendMessageFromConsole(ctx, req.(*ConsoleMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Communicator_ServiceDesc is the grpc.ServiceDesc for Communicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Communicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Communicator",
	HandlerType: (*CommunicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessOutgoingCallback",
			Handler:    _Communicator_ProcessOutgoingCallback_Handler,
		},
		{
			MethodName: "ProcessIncomingSMSCallback",
			Handler:    _Communicator_ProcessIncomingSMSCallback_Handler,
		},
		{
			MethodName: "ProcessMultiChannelCallback",
			Handler:    _Communicator_ProcessMultiChannelCallback_Handler,
		},
		{
			MethodName: "RequestAppointment",
			Handler:    _Communicator_RequestAppointment_Handler,
		},
		{
			MethodName: "AcceptAppointment",
			Handler:    _Communicator_AcceptAppointment_Handler,
		},
		{
			MethodName: "RejectAppointment",
			Handler:    _Communicator_RejectAppointment_Handler,
		},
		{
			MethodName: "SendMessageFromConsole",
			Handler:    _Communicator_SendMessageFromConsole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comms/comms.proto",
}
